# Quarterly Revenue Forecaster & AI Copilot

This is a full-stack web application that predicts quarterly revenue for major tech companies and provides AI-driven strategic insights from their official 10-K reports.

**Live Demo:** https://rev-forecaster-ai.streamlit.app/

## üöÄ Features
- **Predictive Forecasting:** Utilizes an XGBoost model trained on historical financial and macroeconomic data to forecast the next quarter's revenue.
- **Prediction Intervals:** Provides an 80% prediction interval (lower, median, upper bounds) to communicate the model's uncertainty.
- **AI Copilot:** A chat interface powered by a Retrieval-Augmented Generation (RAG) system. Users can ask deep, strategic questions based on the company's latest, official 10-K report.
- **Dynamic & Scalable:** Supports multiple companies (AAPL, MSFT, GOOGL) with a scalable backend architecture.

## üõ†Ô∏è Architecture & Tech Stack
This project is a complete end-to-end MLOps pipeline, from data ingestion to a deployed, interactive web application.

- **Data Ingestion:** Python scripts using `pandas` and APIs (Alpha Vantage for financials, FRED for macroeconomics).
- **Data Transformation & Storage:** Azure Synapse Analytics for scalable data warehousing (using a serverless SQL pool and external tables) and Azure Data Lake Storage for file storage.
- **Machine Learning:**
  - **Training:** Performed in an Azure Machine Learning Studio Notebook.
  - **Model:** XGBoost with quantile regression for prediction intervals.
  - **Feature Engineering:** Advanced time-series features including lags, rolling averages, and seasonal indicators.
  - **Validation:** Rigorous hyperparameter tuning using a time-based train/validation/test split.
- **AI Copilot (RAG):**
  - **Embeddings:** Azure OpenAI `text-embedding-ada-002`.
  - **Vector Store:** Azure AI Search for robust, hybrid search capabilities.
  - **LLM:** Azure OpenAI `gpt-35-turbo` for answer generation.
  - **Orchestration:** LangChain.
- **Application Frontend:** Streamlit.
- **Deployment:**
  - **ML Models & RAG:** Served via a serverless backend on Azure Functions (initially planned, later simplified into the Streamlit app).
  - **Web App:** Deployed for free on Streamlit Community Cloud.
- **Version Control:** Git & GitHub.

## ‚öôÔ∏è Setup and Installation
1. Clone the repository: `git clone https://github.com/sinamov/Q-revenue-forecasting-app.git`
2. Navigate to the project directory: `cd Q-revenue-forecasting-app`
3. Install the required packages: `pip install -r requirements.txt`
4. Set up your credentials in a `.streamlit/secrets.toml` file (see `app.py` for required keys).

## üèÉ‚Äç‚ôÇÔ∏è Usage
Run the Streamlit application from the root directory:
```bash
streamlit run app.py