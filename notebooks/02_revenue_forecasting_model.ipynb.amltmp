{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "%pip install -r ../requirements.txt"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: azure-storage-file-datalake in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 2)) (12.20.0)\nRequirement already satisfied: fredapi in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 3)) (0.5.2)\nRequirement already satisfied: pyarrow in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 4)) (20.0.0)\nRequirement already satisfied: pyodbc in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 7)) (5.2.0)\nRequirement already satisfied: sqlalchemy in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 8)) (2.0.41)\nRequirement already satisfied: mlflow in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 11)) (3.1.1)\nRequirement already satisfied: azureml-mlflow in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 12)) (1.41.0.post1)\nRequirement already satisfied: pandas in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 13)) (1.5.3)\nRequirement already satisfied: scikit-learn in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 14)) (1.7.0)\nRequirement already satisfied: shap in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 15)) (0.48.0)\nRequirement already satisfied: xgboost in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 16)) (3.0.5)\nRequirement already satisfied: python-dotenv in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from -r ../requirements.txt (line 19)) (1.1.1)\nRequirement already satisfied: azure-core>=1.30.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azure-storage-file-datalake->-r ../requirements.txt (line 2)) (1.35.0)\nRequirement already satisfied: azure-storage-blob>=12.25.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azure-storage-file-datalake->-r ../requirements.txt (line 2)) (12.25.1)\nRequirement already satisfied: typing-extensions>=4.6.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azure-storage-file-datalake->-r ../requirements.txt (line 2)) (4.14.1)\nRequirement already satisfied: isodate>=0.6.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azure-storage-file-datalake->-r ../requirements.txt (line 2)) (0.7.2)\nRequirement already satisfied: greenlet>=1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from sqlalchemy->-r ../requirements.txt (line 8)) (3.2.3)\nRequirement already satisfied: mlflow-skinny==3.1.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (3.1.1)\nRequirement already satisfied: Flask<4 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (3.1.1)\nRequirement already satisfied: alembic!=1.10.0,<2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (1.16.4)\nRequirement already satisfied: docker<8,>=4.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (5.0.3)\nRequirement already satisfied: graphene<4 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (3.4.3)\nRequirement already satisfied: gunicorn<24 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (23.0.0)\nRequirement already satisfied: matplotlib<4 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (3.10.3)\nRequirement already satisfied: numpy<3 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (1.23.5)\nRequirement already satisfied: scipy<2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow->-r ../requirements.txt (line 11)) (1.15.3)\nRequirement already satisfied: cachetools<7,>=5.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (5.5.2)\nRequirement already satisfied: click<9,>=7.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (8.2.1)\nRequirement already satisfied: cloudpickle<4 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2.2.1)\nRequirement already satisfied: databricks-sdk<1,>=0.20.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.58.0)\nRequirement already satisfied: fastapi<1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.116.1)\nRequirement already satisfied: gitpython<4,>=3.1.9 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (3.1.44)\nRequirement already satisfied: importlib_metadata!=4.7.0,<9,>=3.7.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (8.6.1)\nRequirement already satisfied: opentelemetry-api<3,>=1.9.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.31.1)\nRequirement already satisfied: opentelemetry-sdk<3,>=1.9.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.31.1)\nRequirement already satisfied: packaging<26 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (21.3)\nRequirement already satisfied: protobuf<7,>=3.12.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (6.31.1)\nRequirement already satisfied: pydantic<3,>=1.10.8 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2.11.7)\nRequirement already satisfied: pyyaml<7,>=5.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (6.0.2)\nRequirement already satisfied: requests<3,>=2.17.3 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2.32.4)\nRequirement already satisfied: sqlparse<1,>=0.4.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.5.3)\nRequirement already satisfied: uvicorn<1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.35.0)\nRequirement already satisfied: python-dateutil>=2.8.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from pandas->-r ../requirements.txt (line 13)) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from pandas->-r ../requirements.txt (line 13)) (2025.2)\nRequirement already satisfied: joblib>=1.2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from scikit-learn->-r ../requirements.txt (line 14)) (1.5.1)\nRequirement already satisfied: threadpoolctl>=3.1.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from scikit-learn->-r ../requirements.txt (line 14)) (3.6.0)\nRequirement already satisfied: Mako in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow->-r ../requirements.txt (line 11)) (1.3.10)\nRequirement already satisfied: tomli in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow->-r ../requirements.txt (line 11)) (2.2.1)\nRequirement already satisfied: google-auth~=2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from databricks-sdk<1,>=0.20.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2.40.3)\nRequirement already satisfied: websocket-client>=0.32.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from docker<8,>=4.0.0->mlflow->-r ../requirements.txt (line 11)) (1.8.0)\nRequirement already satisfied: starlette<0.48.0,>=0.40.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from fastapi<1->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.47.1)\nRequirement already satisfied: blinker>=1.9.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from Flask<4->mlflow->-r ../requirements.txt (line 11)) (1.9.0)\nRequirement already satisfied: itsdangerous>=2.2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from Flask<4->mlflow->-r ../requirements.txt (line 11)) (2.2.0)\nRequirement already satisfied: jinja2>=3.1.2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from Flask<4->mlflow->-r ../requirements.txt (line 11)) (3.1.6)\nRequirement already satisfied: markupsafe>=2.1.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from Flask<4->mlflow->-r ../requirements.txt (line 11)) (3.0.2)\nRequirement already satisfied: werkzeug>=3.1.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from Flask<4->mlflow->-r ../requirements.txt (line 11)) (3.1.3)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from gitpython<4,>=3.1.9->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (4.0.12)\nRequirement already satisfied: smmap<6,>=3.0.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (5.0.2)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.4.2)\nRequirement already satisfied: rsa<5,>=3.1.4 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (4.9.1)\nRequirement already satisfied: graphql-core<3.3,>=3.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from graphene<4->mlflow->-r ../requirements.txt (line 11)) (3.2.6)\nRequirement already satisfied: graphql-relay<3.3,>=3.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from graphene<4->mlflow->-r ../requirements.txt (line 11)) (3.2.0)\nRequirement already satisfied: zipp>=3.20 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from importlib_metadata!=4.7.0,<9,>=3.7.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (3.23.0)\nRequirement already satisfied: contourpy>=1.0.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (1.3.2)\nRequirement already satisfied: cycler>=0.10 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (4.58.5)\nRequirement already satisfied: kiwisolver>=1.3.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (1.4.8)\nRequirement already satisfied: pillow>=8 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (11.3.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from matplotlib<4->mlflow->-r ../requirements.txt (line 11)) (3.2.3)\nRequirement already satisfied: deprecated>=1.2.6 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from opentelemetry-api<3,>=1.9.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.2.18)\nRequirement already satisfied: opentelemetry-semantic-conventions==0.52b1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from opentelemetry-sdk<3,>=1.9.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.52b1)\nRequirement already satisfied: annotated-types>=0.6.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from pydantic<3,>=1.10.8->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from pydantic<3,>=1.10.8->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2.33.2)\nRequirement already satisfied: typing-inspection>=0.4.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from pydantic<3,>=1.10.8->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.4.1)\nRequirement already satisfied: six>=1.5 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas->-r ../requirements.txt (line 13)) (1.17.0)\nRequirement already satisfied: charset_normalizer<4,>=2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.26.7)\nRequirement already satisfied: certifi>=2017.4.17 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (2025.7.9)\nRequirement already satisfied: pyasn1>=0.1.3 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from rsa<5,>=3.1.4->google-auth~=2.0->databricks-sdk<1,>=0.20.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.6.1)\nRequirement already satisfied: anyio<5,>=3.6.2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from starlette<0.48.0,>=0.40.0->fastapi<1->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (4.9.0)\nRequirement already satisfied: exceptiongroup>=1.0.2 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi<1->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.3.0)\nRequirement already satisfied: sniffio>=1.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi<1->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.3.1)\nRequirement already satisfied: h11>=0.8 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from uvicorn<1->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (0.16.0)\nRequirement already satisfied: azureml-core~=1.41.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-mlflow->-r ../requirements.txt (line 12)) (1.41.0.post1)\nRequirement already satisfied: jsonpickle in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-mlflow->-r ../requirements.txt (line 12)) (2.2.0)\nRequirement already satisfied: backports.tempfile in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.0)\nRequirement already satisfied: pathspec<1.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.12.1)\nRequirement already satisfied: msal<2.0.0,>=1.15.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.32.3)\nRequirement already satisfied: msal-extensions<0.4,>=0.3.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.3.1)\nRequirement already satisfied: knack~=0.9.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.9.0)\nRequirement already satisfied: pkginfo in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.12.1.2)\nRequirement already satisfied: argcomplete<3 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.1.2)\nRequirement already satisfied: humanfriendly<11.0,>=4.7 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (10.0)\nRequirement already satisfied: paramiko<3.0.0,>=2.0.8 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.12.0)\nRequirement already satisfied: azure-mgmt-resource<21.0.0,>=15.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (20.1.0)\nRequirement already satisfied: azure-mgmt-containerregistry<10,>=8.2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (9.1.0)\nRequirement already satisfied: azure-mgmt-storage<20.0.0,>=16.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (19.1.0)\nRequirement already satisfied: azure-mgmt-keyvault<10.0.0,>=0.40.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (9.3.0)\nRequirement already satisfied: azure-mgmt-authorization<3,>=0.40.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.0.0)\nRequirement already satisfied: azure-graphrbac<1.0.0,>=0.40.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.61.2)\nRequirement already satisfied: azure-common<2.0.0,>=1.1.12 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.1.28)\nRequirement already satisfied: msrest<1.0.0,>=0.5.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.7.1)\nRequirement already satisfied: msrestazure<=0.6.4,>=0.4.33 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.6.4)\nRequirement already satisfied: cryptography!=1.9,!=2.0.*,!=2.1.*,!=2.2.*,<37.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (36.0.2)\nRequirement already satisfied: ndg-httpsclient<=0.5.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.5.1)\nRequirement already satisfied: SecretStorage<4.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (3.3.3)\nRequirement already satisfied: contextlib2<22.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (21.6.0)\nRequirement already satisfied: PyJWT<3.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.10.1)\nRequirement already satisfied: adal<=1.2.7,>=1.2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.2.7)\nRequirement already satisfied: pyopenssl<23.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (22.0.0)\nRequirement already satisfied: jmespath<1.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.10.0)\nRequirement already satisfied: azure-mgmt-core<2.0.0,>=1.2.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from azure-mgmt-authorization<3,>=0.40.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.6.0)\nRequirement already satisfied: cffi>=1.12 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from cryptography!=1.9,!=2.0.*,!=2.1.*,!=2.2.*,<37.0.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.17.1)\nRequirement already satisfied: pygments in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from knack~=0.9.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.19.2)\nRequirement already satisfied: tabulate in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from knack~=0.9.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.9.0)\nRequirement already satisfied: portalocker<3,>=1.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from msal-extensions<0.4,>=0.3.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.10.1)\nRequirement already satisfied: requests-oauthlib>=0.5.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from msrest<1.0.0,>=0.5.1->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.0.0)\nRequirement already satisfied: bcrypt>=3.1.3 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from paramiko<3.0.0,>=2.0.8->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (4.3.0)\nRequirement already satisfied: pynacl>=1.0.1 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from paramiko<3.0.0,>=2.0.8->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.5.0)\nRequirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests[socks]<3.0.0,>=2.19.1->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.7.1)\nRequirement already satisfied: jeepney>=0.6 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from SecretStorage<4.0.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (0.9.0)\nRequirement already satisfied: tqdm>=4.27.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from shap->-r ../requirements.txt (line 15)) (4.67.1)\nRequirement already satisfied: slicer==0.0.8 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from shap->-r ../requirements.txt (line 15)) (0.0.8)\nRequirement already satisfied: numba>=0.54 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from shap->-r ../requirements.txt (line 15)) (0.62.1)\nRequirement already satisfied: nvidia-nccl-cu12 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from xgboost->-r ../requirements.txt (line 16)) (2.28.3)\nRequirement already satisfied: pycparser in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from cffi>=1.12->cryptography!=1.9,!=2.0.*,!=2.1.*,!=2.2.*,<37.0.0->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (2.22)\nRequirement already satisfied: wrapt<2,>=1.10 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from deprecated>=1.2.6->opentelemetry-api<3,>=1.9.0->mlflow-skinny==3.1.1->mlflow->-r ../requirements.txt (line 11)) (1.17.2)\nRequirement already satisfied: llvmlite<0.46,>=0.45.0dev0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from numba>=0.54->shap->-r ../requirements.txt (line 15)) (0.45.1)\nRequirement already satisfied: oauthlib>=3.0.0 in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from requests-oauthlib>=0.5.0->msrest<1.0.0,>=0.5.1->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (3.3.1)\nRequirement already satisfied: backports.weakref in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (from backports.tempfile->azureml-core~=1.41.0->azureml-mlflow->-r ../requirements.txt (line 12)) (1.0.post1)\n\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m25.1.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49m/anaconda/envs/azureml_py310_sdkv2/bin/python -m pip install --upgrade pip\u001b[0m\nNote: you may need to restart the kernel to use updated packages.\n"
        }
      ],
      "execution_count": 1,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import itertools\n",
        "from sqlalchemy import create_engine, text\n",
        "from dotenv import load_dotenv\n",
        "import xgboost as xgb\n",
        "import shap\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "import mlflow\n",
        "\n",
        "# Load environment variables\n",
        "load_dotenv()\n",
        "SYNAPSE_CONN_STRING = os.getenv(\"SYNAPSE_CONN_STRING\")\n",
        "\n",
        "# Load data from Synapse\n",
        "engine = create_engine(SYNAPSE_CONN_STRING, connect_args={'timeout': 60})\n",
        "with engine.connect() as connection:\n",
        "    df = pd.read_sql_query(text(\"SELECT * FROM v_financials_quarterly\"), connection)\n",
        "\n",
        "print(\"Data loaded successfully.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Data loaded successfully.\n"
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1759795382857
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert date columns to datetime objects\n",
        "df['prediction_quarter'] = pd.to_datetime(df['prediction_quarter'])\n",
        "df['report_date'] = pd.to_datetime(df['report_date'])\n",
        "\n",
        "# Sort the data chronologically per company\n",
        "df.sort_values(by=['ticker', 'prediction_quarter'], inplace=True)\n",
        "df.reset_index(drop=True, inplace=True)\n",
        "\n",
        "print(\"Data sorted and prepared.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Data sorted and prepared.\n"
        }
      ],
      "execution_count": 3,
      "metadata": {
        "gather": {
          "logged": 1759795385711
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create derived features\n",
        "df['shareholder_equity'] = df['assets'] - df['liabilities']\n",
        "\n",
        "# Create the target variable\n",
        "df['target_revenue_next_q'] = df.groupby('ticker')['revenues'].shift(-1)\n",
        "\n",
        "# Create time-based features\n",
        "df['quarter'] = df['prediction_quarter'].dt.quarter\n",
        "df['year'] = df['prediction_quarter'].dt.year\n",
        "\n",
        "# Define and create lag/rolling features\n",
        "features_to_engineer = {\n",
        "    'revenues': {'lags': [1, 2, 3, 4], 'rolling_avg': [4]},\n",
        "    'net_income': {'lags': [2, 3, 4], 'rolling_avg': [4]},\n",
        "    'research_and_development_expense': {'lags': [4, 5, 6, 7, 8]},\n",
        "    'selling_general_and_administrative_expense': {'lags': [1, 2], 'rolling_avg': [4]},\n",
        "    'assets': {'lags': [2, 3, 4]},\n",
        "    'liabilities': {'lags': [2, 3, 4]},\n",
        "    'shareholder_equity': {'lags': [2, 3, 4]},\n",
        "    'gdp': {'lags': [1, 2]},\n",
        "    'cpi': {'lags': [1]},\n",
        "    'unemployment': {'lags': [1, 2]}\n",
        "}\n",
        "\n",
        "for col, params in features_to_engineer.items():\n",
        "    if 'lags' in params:\n",
        "        for lag in params['lags']:\n",
        "            df[f'{col}_lag_{lag}'] = df.groupby('ticker')[col].shift(lag)\n",
        "    if 'rolling_avg' in params:\n",
        "        for window in params['rolling_avg']:\n",
        "            df[f'{col}_rolling_avg_{window}'] = df.groupby('ticker')[col].transform(lambda x: x.rolling(window=window).mean())\n",
        "\n",
        "df['revenue_seasonal_diff'] = df['revenues'] - df['revenues_rolling_avg_4']\n",
        "\n",
        "print(\"Feature engineering complete.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Feature engineering complete.\n"
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1759795389683
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows with nulls created by feature engineering\n",
        "df_model = df.dropna().copy()\n",
        "df_model.set_index('prediction_quarter', inplace=True)\n",
        "\n",
        "# Define X and y, ensuring y contains the ticker for alignment\n",
        "feature_cols = [c for c in df_model.columns if '_lag_' in c or '_rolling_avg_' in c or '_seasonal_diff_' in c]\n",
        "time_cols = ['year', 'quarter']\n",
        "X = df_model[feature_cols + time_cols].copy()\n",
        "y = df_model[['target_revenue_next_q', 'ticker']]\n",
        "X['quarter'] = X['quarter'].astype('category')\n",
        "\n",
        "# --- Dynamic Train-Validation-Test Split ---\n",
        "\n",
        "# Find the last date in our feature set\n",
        "last_date = X.index.max()\n",
        "\n",
        "# Define the split points relative to the last date\n",
        "# The test set will be the most recent full year (4 quarters)\n",
        "validation_end_date = last_date - pd.DateOffset(years=1)\n",
        "# The validation set will be the year before the test set\n",
        "train_end_date = validation_end_date - pd.DateOffset(years=1)\n",
        "\n",
        "print(f\"Latest data point: {last_date.date()}\")\n",
        "print(f\"Splitting training data at: {train_end_date.date()}\")\n",
        "print(f\"Splitting validation data at: {validation_end_date.date()}\")\n",
        "\n",
        "# Create the training set\n",
        "X_train = X[X.index <= train_end_date]\n",
        "y_train = y[y.index <= train_end_date]\n",
        "\n",
        "# Create the validation set\n",
        "X_val = X[(X.index > train_end_date) & (X.index <= validation_end_date)]\n",
        "y_val = y[(X.index > train_end_date) & (X.index <= validation_end_date)]\n",
        "\n",
        "# Create the test set\n",
        "X_test = X[X.index > validation_end_date]\n",
        "y_test = y[X.index > validation_end_date]\n",
        "\n",
        "print(f\"\\nTraining set size: {len(X_train)}\")\n",
        "print(f\"Validation set size: {len(X_val)}\")\n",
        "print(f\"Test set size: {len(X_test)}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Latest data point: 2025-04-01\nSplitting training data at: 2023-04-01\nSplitting validation data at: 2024-04-01\n\nTraining set size: 192\nValidation set size: 12\nTest set size: 12\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1759795392679
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Hyperparameter Grid\n",
        "param_grid = { 'n_estimators': [500, 1000], 'learning_rate': [0.05, 0.1], 'max_depth': [3, 5], 'subsample': [0.7, 1.0] }\n",
        "all_params = [dict(zip(param_grid.keys(), v)) for v in itertools.product(*param_grid.values())]\n",
        "best_score = float('inf')\n",
        "best_params = None\n",
        "\n",
        "print(f\"Starting hyperparameter search across {len(all_params)} combinations...\")\n",
        "for params in all_params:\n",
        "    model = xgb.XGBRegressor(objective='reg:squarederror', enable_categorical=True, random_state=42, **params)\n",
        "    model.fit(X_train, y_train['target_revenue_next_q'], verbose=False)\n",
        "    val_preds = model.predict(X_val)\n",
        "    score = mean_absolute_error(y_val['target_revenue_next_q'], val_preds)\n",
        "    if score < best_score:\n",
        "        best_score = score\n",
        "        best_params = params\n",
        "\n",
        "print(\"\\nHyperparameter tuning complete.\")\n",
        "print(f\"Best MAE on Validation Set: ${best_score:,.2f}\")\n",
        "print(\"Best hyperparameters found:\", best_params)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Starting hyperparameter search across 16 combinations...\n\nHyperparameter tuning complete.\nBest MAE on Validation Set: $4,759,262,565.33\nBest hyperparameters found: {'n_estimators': 500, 'learning_rate': 0.1, 'max_depth': 3, 'subsample': 1.0}\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "gather": {
          "logged": 1759795410230
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combine training and validation sets\n",
        "X_train_full = pd.concat([X_train, X_val])\n",
        "y_train_full = pd.concat([y_train, y_val])\n",
        "\n",
        "# Train the final median model with the best parameters\n",
        "final_median_model = xgb.XGBRegressor(objective='reg:squarederror', enable_categorical=True, random_state=42, **best_params)\n",
        "final_median_model.fit(X_train_full, y_train_full['target_revenue_next_q'])\n",
        "\n",
        "# Evaluate on the untouched test set to get our final \"report card\"\n",
        "test_predictions = final_median_model.predict(X_test)\n",
        "final_mae = mean_absolute_error(y_test['target_revenue_next_q'], test_predictions)\n",
        "print(f\"\\nFinal Model MAE on Test Set: ${final_mae:,.2f}\")\n",
        "\n",
        "# Interpret the final model's predictions on the test set\n",
        "explainer = shap.TreeExplainer(final_median_model)\n",
        "shap_values = explainer.shap_values(X_test)\n",
        "print(\"\\nSHAP Summary Plot (Feature Importance):\")\n",
        "shap.summary_plot(shap_values, X_test, plot_type=\"bar\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nFinal Model MAE on Test Set: $4,305,103,946.67\n\nSHAP Summary Plot (Feature Importance):\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 800x950 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1759795414491
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combine all historical data for the final training\n",
        "X_all_history = pd.concat([X_train_full, X_test])\n",
        "y_all_history = pd.concat([y_train_full, y_test])\n",
        "\n",
        "# Define the quantiles\n",
        "lower_alpha, median_alpha, upper_alpha = 0.1, 0.5, 0.9\n",
        "\n",
        "# Initialize the three final models\n",
        "model_lower = xgb.XGBRegressor(objective='reg:quantileerror', quantile_alpha=lower_alpha, enable_categorical=True, random_state=42, **best_params)\n",
        "model_median = xgb.XGBRegressor(objective='reg:quantileerror', quantile_alpha=median_alpha, enable_categorical=True, random_state=42, **best_params)\n",
        "model_upper = xgb.XGBRegressor(objective='reg:quantileerror', quantile_alpha=upper_alpha, enable_categorical=True, random_state=42, **best_params)\n",
        "\n",
        "print(f\"\\nRe-training final models on all {len(X_all_history)} data points...\")\n",
        "model_lower.fit(X_all_history, y_all_history['target_revenue_next_q'])\n",
        "model_median.fit(X_all_history, y_all_history['target_revenue_next_q'])\n",
        "model_upper.fit(X_all_history, y_all_history['target_revenue_next_q'])\n",
        "print(\"Final models are ready.\")\n",
        "\n",
        "# Prepare the future input data\n",
        "future_input_df = df.groupby('ticker').last()\n",
        "future_input_df['prediction_quarter'] = future_input_df['prediction_quarter'] + pd.DateOffset(months=3)\n",
        "X_future = future_input_df[X_train.columns].copy()\n",
        "X_future['quarter'] = X_future['quarter'].astype('category')\n",
        "\n",
        "# Generate the final forecast\n",
        "future_lower = model_lower.predict(X_future)\n",
        "future_median = model_median.predict(X_future)\n",
        "future_upper = model_upper.predict(X_future)\n",
        "\n",
        "forecast_df = pd.DataFrame({ 'Forecast_Quarter': future_input_df['prediction_quarter'], 'Lower_Bound': future_lower, 'Forecast': future_median, 'Upper_Bound': future_upper }, index=X_future.index)\n",
        "forecast_df['Lower_Bound'] = forecast_df[['Lower_Bound', 'Forecast', 'Upper_Bound']].min(axis=1)\n",
        "forecast_df['Upper_Bound'] = forecast_df[['Lower_Bound', 'Forecast', 'Upper_Bound']].max(axis=1)\n",
        "\n",
        "print(\"\\n--- FINAL REVENUE FORECAST ---\")\n",
        "display(forecast_df)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nRe-training final models on all 216 data points...\nFinal models are ready.\n\n--- FINAL REVENUE FORECAST ---\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "       Forecast_Quarter   Lower_Bound      Forecast   Upper_Bound\nticker                                                           \nAAPL         2025-10-01  7.833458e+10  1.012518e+11  1.012518e+11\nGOOGL        2025-10-01  7.923693e+10  9.616154e+10  9.721762e+10\nMSFT         2025-10-01  7.607974e+10  7.688434e+10  7.688434e+10",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Forecast_Quarter</th>\n      <th>Lower_Bound</th>\n      <th>Forecast</th>\n      <th>Upper_Bound</th>\n    </tr>\n    <tr>\n      <th>ticker</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AAPL</th>\n      <td>2025-10-01</td>\n      <td>7.833458e+10</td>\n      <td>1.012518e+11</td>\n      <td>1.012518e+11</td>\n    </tr>\n    <tr>\n      <th>GOOGL</th>\n      <td>2025-10-01</td>\n      <td>7.923693e+10</td>\n      <td>9.616154e+10</td>\n      <td>9.721762e+10</td>\n    </tr>\n    <tr>\n      <th>MSFT</th>\n      <td>2025-10-01</td>\n      <td>7.607974e+10</td>\n      <td>7.688434e+10</td>\n      <td>7.688434e+10</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1759795418861
        },
        "jupyter": {
          "outputs_hidden": false
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Manual Save and Log Artifact Workflow ---\n",
        "\n",
        "# 1. Save the models to local files\n",
        "model_lower.save_model(\"model_lower.json\")\n",
        "model_median.save_model(\"model_median.json\")\n",
        "model_upper.save_model(\"model_upper.json\")\n",
        "print(\"\\nModels saved to local .json files.\")\n",
        "\n",
        "# 2. Log the files as artifacts to Azure ML\n",
        "mlflow.set_experiment(\"Revenue Forecasting\")\n",
        "with mlflow.start_run() as run:\n",
        "    mlflow.log_params(best_params)\n",
        "    mlflow.log_metric(\"final_test_mae\", final_mae)\n",
        "    \n",
        "    # Log each model file as a separate artifact in its own folder\n",
        "    mlflow.log_artifact(\"model_lower.json\", \"model_lower\")\n",
        "    mlflow.log_artifact(\"model_median.json\", \"model_median\")\n",
        "    mlflow.log_artifact(\"model_upper.json\", \"model_upper\")\n",
        "    \n",
        "print(f\"\\nSuccessfully logged all three models as artifacts in MLflow Run ID: {run.info.run_id}\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nModels saved to local .json files.\n🏃 View run frosty_drain_kbcg8m7z at: https://westus2.api.azureml.ms/mlflow/v1.0/subscriptions/5f163b2e-8558-4d62-b31c-fbf23527e190/resourceGroups/ai-revenue-forecaster/providers/Microsoft.MachineLearningServices/workspaces/mlw-revenue-forecaster/#/experiments/77665c53-43a7-4f14-a996-4fc9152f5311/runs/25c561ca-7069-4726-8b81-5c0b2486329c\n🧪 View experiment at: https://westus2.api.azureml.ms/mlflow/v1.0/subscriptions/5f163b2e-8558-4d62-b31c-fbf23527e190/resourceGroups/ai-revenue-forecaster/providers/Microsoft.MachineLearningServices/workspaces/mlw-revenue-forecaster/#/experiments/77665c53-43a7-4f14-a996-4fc9152f5311\n\nSuccessfully logged all three models as artifacts in MLflow Run ID: 25c561ca-7069-4726-8b81-5c0b2486329c\n"
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1759795427670
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Run this in your notebook to get the column list\n",
        "model_columns = X_train.columns.tolist()\n",
        "print(model_columns)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "['revenues_lag_1', 'revenues_lag_2', 'revenues_lag_3', 'revenues_lag_4', 'revenues_rolling_avg_4', 'net_income_lag_2', 'net_income_lag_3', 'net_income_lag_4', 'net_income_rolling_avg_4', 'research_and_development_expense_lag_4', 'research_and_development_expense_lag_5', 'research_and_development_expense_lag_6', 'research_and_development_expense_lag_7', 'research_and_development_expense_lag_8', 'selling_general_and_administrative_expense_lag_1', 'selling_general_and_administrative_expense_lag_2', 'selling_general_and_administrative_expense_rolling_avg_4', 'assets_lag_2', 'assets_lag_3', 'assets_lag_4', 'liabilities_lag_2', 'liabilities_lag_3', 'liabilities_lag_4', 'shareholder_equity_lag_2', 'shareholder_equity_lag_3', 'shareholder_equity_lag_4', 'gdp_lag_1', 'gdp_lag_2', 'cpi_lag_1', 'unemployment_lag_1', 'unemployment_lag_2', 'year', 'quarter']\n"
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1759795431645
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# In your Jupyter Notebook\n",
        "# This creates a CSV with the historical data needed for the chart\n",
        "historical_df = df[['ticker', 'prediction_quarter', 'revenues']].dropna()\n",
        "historical_df.to_csv(\"../data/historical_revenues.csv\", index=False)\n",
        "\n",
        "print(\"historical_revenues.csv has been saved to your 'data' folder.\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "historical_revenues.csv has been saved to your 'data' folder.\n"
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1759807780669
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python310-sdkv2",
      "language": "python",
      "display_name": "Python 3.10 - SDK v2"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.18",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}